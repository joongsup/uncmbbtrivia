<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jay&#39;s Notes</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jay&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GNU Make for Data Analysis Workflow Management</title>
      <link>/post/2018/08/26/gnu-make-for-workflow-manager/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/26/gnu-make-for-workflow-manager/</guid>
      <description>I’ve finally started using GNU make as a data analysis workflow management tool. I knew it existed as a software “build” tool, and although I always thought Makefile1 sound pretty cool, I never actually had to use it, not just as a build tool, but also as a data analysis workflow management tool.
It started with @thosjleepr’s tweet that showed up in my feed:
 Inspired by @carlislerainey, I’ve added some code to my intro #make tutorial that visualizes the makefile’s dependency graph natively in R using #ggraph.</description>
    </item>
    
    <item>
      <title>Home sweet dome</title>
      <link>/post/2018/08/05/home-sweet-dome/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/05/home-sweet-dome/</guid>
      <description>I ran into a post on the Tar Heel Blog (THB) that talks about the Tar Heel’s home court advantage in recent years. Since it’s been a while since I wrote anything about UNCMBB, I thought it’d be a great topic to write on here too, looking at how great the teams have played on home court1 in recent years. And maybe I’ll look at how Duke has played on their home court too during the same time period just because.</description>
    </item>
    
    <item>
      <title>My old coding products</title>
      <link>/post/2018/07/27/my-old-coding-products/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/07/27/my-old-coding-products/</guid>
      <description>Lately I’ve been thinking about why I care much about everything R and sharing the joy of using R, which deserves its own post. Much of it has to do with how I did and did not get a proper training in coding suitable for data analysis in the past, but as I looked back on my personal coding history, I came across hundreds of code files that I wrote in the past1.</description>
    </item>
    
    <item>
      <title>Comments on data analysis workflow</title>
      <link>/post/2018/07/22/comments-on-data-analysis-workflow/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/07/22/comments-on-data-analysis-workflow/</guid>
      <description>Introduction There are several benefits of establishing a good and routine data analysis workflow that you follow on a daily basis. At least two benefits come to mind immediately.
Having a good data analysis workflow is beneficial and needed to do reproducible research/work (RR). RR could mean one thing to one and quite another to others, but to me, doing reproducible work means specifically doing my work in a fashion that allows me to pick up from last touched point in that particular work after some break.</description>
    </item>
    
    <item>
      <title>External presentation goal</title>
      <link>/post/2018/07/22/external-presentation-goal/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/07/22/external-presentation-goal/</guid>
      <description>Like Yihui (of blogdown and many other awesome R packages) whose goal is to publish a book a year1, I have a similar personal goal that I started last year. While I’d love to write a book a year, it’s too ambitious a goal for me (and many people in general, I’d think) to pursue. Instead, my personal goal is to do an external presentation a year, be it for meetups, conferences, or nearby schools as a guest speaker.</description>
    </item>
    
    <item>
      <title>Insert images in blogdown post, static directory, and xaringan</title>
      <link>/post/2018/05/17/insert-images-in-blogdown-post/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/17/insert-images-in-blogdown-post/</guid>
      <description>While working on yet another separate blog post, I needed to insert images in the post. I knew from rmarkdown syntax that I can use: ![image name](path to file), but then I didn’t know where the image files need to be.
It turns out I can have the image files under the static/ directory, everything under which will be copied to public directory.
Moreover, static/ directory can also be used to build Rmd documents (e.</description>
    </item>
    
    <item>
      <title>R package development walk-thru</title>
      <link>/post/2018/05/11/r-package-development-walk-thru/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/r-package-development-walk-thru/</guid>
      <description>Create a new RStudio project. Next the best part so far: we have to give the new package a name! Once new project is created, this is the default contents. We’ll go to project options menu and check roxygen option for documentation. Now let’s create our own function. Let’s test the new function by loading the functions. No need for sourcing anymore! Now that the function is working as intended, let’s document the function for others, including future us.</description>
    </item>
    
    <item>
      <title>Random Forest Revisited</title>
      <link>/post/2018/05/11/random-forest-revisited/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/random-forest-revisited/</guid>
      <description>Hypothetical setting  Objective: binary classification N = 5M observations p = 10 variables (5 categorical and 5 continuous variables) ntree = 100 (model will not be adversely affected if ntree is too big) mtry = number of predictors to consider at each split (fixed or determined by resampling (10-fold cv)   Bootstrap samples for each tree  Bootstrap samples (sampling with replacement) of same size as the original data (N) is taken at each tree.</description>
    </item>
    
    <item>
      <title>Vim mode in RStudio</title>
      <link>/post/2018/05/11/vim-mode-in-rstudio/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/vim-mode-in-rstudio/</guid>
      <description>I heard about Vim mode in RStudio but haven’t really given it a try. While working on a new blog post (not this one), I decided to give it a try, as I had to keep switching between non-Vim mode on my local Mac and Vim mode in my remote server (Linux). I’m not a Vim expert by any measure, but for some reason, I like working in Vim.
So the option is in Tools/Global Options/Code/Key Bindings, and boom, I started using Vim in RStudio.</description>
    </item>
    
    <item>
      <title>rJava and Mac OS</title>
      <link>/post/2018/05/03/rjava-and-mac-os/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/03/rjava-and-mac-os/</guid>
      <description>For the past couple of days, I needed to install rJava package on my Mac, and boy did I know how complicated the process would turn out to be! I vaguely knew about the mess that is java and Mac OS, but I didn’t care that much until now, because (1) most of my development work has been done in my company environment (Linux) which I ssh into and is pretty well managed by folks more qualified to do so than me and (2) for my personal work (i.</description>
    </item>
    
  </channel>
</rss>