<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jay&#39;s Notes</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jay&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>External presentation goal</title>
      <link>/post/2018/07/22/external-presentation-goal/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/07/22/external-presentation-goal/</guid>
      <description>Like Yihui (of blogdown and many other awesome R packages) whose goal is to publish a book a year1, I have a similar personal goal that I started last year. While I’d love to write a book a year, it’s too ambitious a goal for me (and many people in general, I’d thinkw) to pursue. Instead, my personal goal is to do an external presentation a year, be it for meetups, conferences, or nearby schools as a guest speaker.</description>
    </item>
    
    <item>
      <title>Insert images in blogdown post, static directory, and xaringan</title>
      <link>/post/2018/05/17/insert-images-in-blogdown-post/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/17/insert-images-in-blogdown-post/</guid>
      <description>While working on yet another separate blog post, I needed to insert images in the post. I knew from rmarkdown syntax that I can use: ![image name](path to file), but then I didn’t know where the image files need to be.
It turns out I can have the image files under the static/ directory, everything under which will be copied to public directory.
Moreover, static/ directory can also be used to build Rmd documents (e.</description>
    </item>
    
    <item>
      <title>R package development walk-thru</title>
      <link>/post/2018/05/11/r-package-development-walk-thru/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/r-package-development-walk-thru/</guid>
      <description>Create a new RStudio project. Next the best part so far: we have to give the new package a name! Once new project is created, this is the default contents. We’ll go to project options menu and check roxygen option for documentation. Now let’s create our own function. Let’s test the new function by loading the functions. No need for sourcing anymore! Now that the function is working as intended, let’s document the function for others, including future us.</description>
    </item>
    
    <item>
      <title>Random Forest Revisited</title>
      <link>/post/2018/05/11/random-forest-revisited/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/random-forest-revisited/</guid>
      <description>Hypothetical setting  Objective: binary classification N = 5M observations p = 10 variables (5 categorical and 5 continuous variables) ntree = 100 (model will not be adversely affected if ntree is too big) mtry = number of predictors to consider at each split (fixed or determined by resampling (10-fold cv)   Bootstrap samples for each tree  Bootstrap samples (sampling with replacement) of same size as the original data (N) is taken at each tree.</description>
    </item>
    
    <item>
      <title>Vim mode in RStudio</title>
      <link>/post/2018/05/11/vim-mode-in-rstudio/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/11/vim-mode-in-rstudio/</guid>
      <description>I heard about Vim mode in RStudio but haven’t really given it a try. While working on a new blog post (not this one), I decided to give it a try, as I had to keep switching between non-Vim mode on my local Mac and Vim mode in my remote server (Linux). I’m not a Vim expert by any measure, but for some reason, I like working in Vim.
So the option is in Tools/Global Options/Code/Key Bindings, and boom, I started using Vim in RStudio.</description>
    </item>
    
    <item>
      <title>rJava and Mac OS</title>
      <link>/post/2018/05/03/rjava-and-mac-os/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/05/03/rjava-and-mac-os/</guid>
      <description>For the past couple of days, I needed to install rJava package on my Mac, and boy did I know how complicated the process would turn out to be! I vaguely knew about the mess that is java and Mac OS, but I didn’t care that much until now, because (1) most of my development work has been done in my company environment (Linux) which I ssh into and is pretty well managed by folks more qualified to do so than me and (2) for my personal work (i.</description>
    </item>
    
    <item>
      <title>Use of quos</title>
      <link>/post/2018/04/20/use-of-quos/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/04/20/use-of-quos/</guid>
      <description>suppressPackageStartupMessages(library(uncmbb)) suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(jutilr)) head(unc)  ## Season Game_Date Game_Day Type Where Opponent_School Result Tm Opp ## 1 1950 1949-12-01 Thu REG H Elon W 57 39 ## 2 1950 1949-12-03 Sat REG A Richmond W 58 50 ## 3 1950 1949-12-05 Mon REG A Virginia Tech L 48 62 ## 4 1950 1949-12-07 Wed REG A Lenoir-Rhyne L 78 79 ## 5 1950 1949-12-09 Fri REG H George Washington L 44 54 ## 6 1950 1949-12-28 Wed REG N West Virginia L 50 58 ## OT ## 1 &amp;lt;NA&amp;gt; ## 2 &amp;lt;NA&amp;gt; ## 3 &amp;lt;NA&amp;gt; ## 4 OT ## 5 &amp;lt;NA&amp;gt; ## 6 &amp;lt;NA&amp;gt; plot1 &amp;lt;- function(lst, x, y){ x &amp;lt;- enquo(x) y &amp;lt;- enquo(y) x_name &amp;lt;- quo_name(x) y_name &amp;lt;- quo_name(y) lst %&amp;gt;% map(function(df) df %&amp;gt;% ggplot(aes_string(x = paste0(&amp;quot;reorder(&amp;quot;, x_name, &amp;quot;, -&amp;quot;, y_name, &amp;quot;)&amp;quot;), y = y_name)) + geom_bar(stat = &amp;quot;identity&amp;quot;) + geom_text(aes(label = n), vjust = -0.</description>
    </item>
    
    <item>
      <title>Package uncmbb updated!</title>
      <link>/post/2018/04/17/package-update/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/04/17/package-update/</guid>
      <description>Ever since UNCMBB team’s season ended about a month ago, I’ve been meaning to update the data in uncmbb package, and I finally got to it. Obviously the new version includes 2017-2018 season match results for both UNC and Duke MBB teams, but it also includes new features in wrapper functions that are useful when working with uncmbb package.
I forgot to take notes of the steps taken when I was submitting uncmbb to CRAN for the first time last year, and this time I remembered to do so and take some screenshots too.</description>
    </item>
    
    <item>
      <title>Categorical variable treatment</title>
      <link>/post/2018/03/24/categorical-variable-treatment/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/03/24/categorical-variable-treatment/</guid>
      <description>In reviewing details of random forest, I came upon several concepts that I thought were both interesting and important enough to be highlighted in a separate post. Mainly for my own reference, but if it helps others, that’d be great too!
Various categorical variable encoding methods and related concepts  Reference cell coding (dummy encoding/one-hot encoding)  How categorical variables are treated (by default?) in regressions in R Appreciating R’s way of doing things (behind the scence) Turns out same thing as dummy coding!</description>
    </item>
    
    <item>
      <title>RSS feed and rbind github repo</title>
      <link>/post/2018/02/06/rss-feed/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/02/06/rss-feed/</guid>
      <description>Maëlle Salmon reminded me to submit posts/blog RSS feed to R weekly on my tweet, and I set out to do just that. I didn’t have much understanding as to how to though, and googling things like “how to generate rss feed in xmin blogdown” didn’t really turn up anything useful for new bloggers like me. Maybe it’s a quite straighforward knowledge that my full blog url is not a valid RSS feed address, but I got to know that only after checking my blog url from the R weekly submit page.</description>
    </item>
    
  </channel>
</rss>